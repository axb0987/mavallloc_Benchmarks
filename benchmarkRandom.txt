#include "mavalloc.h"
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

void test(int ran) {
	clock_t start, end;

	start = clock();



	
	//Test 5
	mavalloc_init(80, NEXT_FIT);
	char* ptr = mavalloc_alloc(80);
	mavalloc_destroy();

	//Test 6
	mavalloc_init(10000, NEXT_FIT);

	char* ptr1 = mavalloc_alloc(2000);	//2000 -> 8000
	char* ptr2 = mavalloc_alloc(1000);	//2000 -> 1000 -> 7000
	char* ptr3 = mavalloc_alloc(3000);	//2000 -> 1000 -> 3000 -> 4000
	mavalloc_free(ptr2);				//2000 -> 1000(H) -> 3000 -> 4000
	char* ptr4 = mavalloc_alloc(2000);	//2000 -> 1000 -> 3000 -> 2000 -> 2000
	char* ptr5 = mavalloc_alloc(400);	//2000 -> 400 -> 600 -> 3000 -> 2000 -> 2000
	char* ptr6 = mavalloc_alloc(800);	//2000 -> 400 -> 600 -> 3000 -> 2000 -> 800 -> 1200
	char* ptr7 = mavalloc_alloc(200);	//2000 -> 400 -> 600 -> 3000 -> 2000 -> 800 -> 1200
	char* ptr8 = mavalloc_alloc(600);
	ptr = mavalloc_alloc(1000);	//2000 -> 400 -> 600 -> 3000 -> 2000 -> 800 -> 1200

	mavalloc_destroy();

	
	//Test 10 for NEXT_FIT
	mavalloc_init(5000, NEXT_FIT);

	ptr1 = mavalloc_alloc(500);	//500 -> 4500
	ptr4 = mavalloc_alloc(1000);	//500 -> 1000 -> 3500
	ptr3 = mavalloc_alloc(2000);	//500 -> 1000 -> 2000 -> 1500
	ptr2 = mavalloc_alloc(1100);	//500 -> 1000 -> 2000 -> 1100 -> 400
	mavalloc_free(ptr1);				//500H-> 1000 -> 2000 -> 1100 -> 400
	ptr5 = mavalloc_alloc(400);	//500H-> 1000 -> 2000 -> 1100 -> 400
	mavalloc_free(ptr3);				//500H-> 1000 -> 2000H-> 1100 -> 400

	ptr6 = mavalloc_alloc(1000);	//500H-> 1000 -> 1000 -> 1000H -> 1100 -> 400
	mavalloc_free(ptr4);				//1500H -> 1000 -> 1000H -> 1100 -> 400 
	ptr7 = mavalloc_alloc(1000);	//1500H -> 1000 -> 1000 -> 1100 -> 400 
	ptr8 = mavalloc_alloc(1000);	//1000 ->500H -> 1000 -> 1000 -> 1100 -> 400 
			
	mavalloc_destroy();
	//Test 11 
	mavalloc_init(10000, NEXT_FIT);

	ptr5 = mavalloc_alloc(2000);	//2 -> 8
	ptr2 = mavalloc_alloc(3000);	//2 -> 3 -> 5
	ptr6 = mavalloc_alloc(4000);	//2 -> 3 -> 4 -> 1
	ptr7 = mavalloc_alloc(500);		//2 -> 3 -> 4 -> 500 -> 500H
	mavalloc_free(ptr5);			//2000H -> 3 -> 4 -> 500 -> 500H
	mavalloc_free(ptr6);			//2000H -> 3 -> 4000H -> 500 -> 500H
	ptr1 = mavalloc_alloc(2000);	//2000H -> 3 -> 2000 -> 2000H -> 500 -> 500H
	mavalloc_free(ptr7);			//2000H -> 3 -> 2000 -> 3000H
	ptr3 = mavalloc_alloc(2000);	//2000H -> 3 -> 2000 -> 2000 -> 1000H
	ptr4 = mavalloc_alloc(1000);	//1000 -> 1000H -> 3000 -> 2000 -> 2000 -> 1000H
	ptr8 = mavalloc_alloc(1000);	//I do not remember if it would take the last node touched if they were equal so it works out
	ptr = mavalloc_alloc(1000);	//1000 -> 1000 -> 3000 -> 2000 -> 2000 -> 1000 
	
	mavalloc_destroy();

	mavalloc_init(200, NEXT_FIT);
	ptr8 = mavalloc_alloc(200);
	mavalloc_free(ptr8);
	ptr = mavalloc_alloc(200);
	mavalloc_free(ptr);

	mavalloc_destroy();

	char* arr[9999];

	mavalloc_init(300000, NEXT_FIT);
	for (int i = 0; i < 9999; i++) {
		//if even

		if ((i % 2) == 0) {
			arr[i] = mavalloc_alloc(20);
		}
		else if ((i % 3) == 0) {
			arr[i] = mavalloc_alloc(8);
		}
		else {
			arr[i] = mavalloc_alloc(3);
		}
		if ((i % 5) == 0) {
			mavalloc_free(arr[i-(ran%5)]);
		}
		if (ran == i) {
			mavalloc_destroy();
			mavalloc_init(300000, NEXT_FIT);
		}
		

	}
	mavalloc_destroy();
	end = clock();

	double duration = 1000 * ((double)end - start) / CLOCKS_PER_SEC;
	printf("%.6f\n", duration);

}

int main(int argc, char* argv[])
{
	printf("NEXT_FIT\n");
	for (int i = 0; i < 500; i++) {
		test(i);
	}
	return 0;

}
